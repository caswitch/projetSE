!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_SIZE	file.c	7;"	d	file:
BUFF_SIZE	detecter.c	14;"	d	file:
Buffer	buff.c	/^} Buffer;$/;"	t	typeref:struct:s_buff	file:
CONVERT_USEC	detecter.c	15;"	d	file:
FICHIER	file.c	/^typedef struct FICHIER {$/;"	s	file:
FICHIER	file.c	/^} *FICHIER;$/;"	t	typeref:struct:FICHIER	file:
READ	detecter.c	16;"	d	file:
T	clock.c	5;"	d	file:
WRITE	detecter.c	17;"	d	file:
__DETECTER__H_	detecter.h	2;"	d
assert	detecter.c	/^void assert(int return_value, char* msg){$/;"	f
buff_free	buff.c	/^void buff_free(Buffer* b){$/;"	f
buff_getSize	buff.c	/^int buff_getSize(Buffer* b){$/;"	f
buff_getc	buff.c	/^int buff_getc(Buffer* b){$/;"	f
buff_putc	buff.c	/^Buffer* buff_putc(Buffer* b, char c){$/;"	f
buff_reset	buff.c	/^bool buff_reset(Buffer* b){$/;"	f
buff_setpos	buff.c	/^bool buff_setpos(Buffer* b, bool mode, unsigned int pos){$/;"	f
buff_toString	buff.c	/^char* buff_toString(Buffer* b){$/;"	f
buffer	file.c	/^	char* buffer;$/;"	m	struct:FICHIER	file:
callProgram	detecter.c	/^int callProgram(char const *prog, char *const args[]){$/;"	f
exit_code	detecter.c	/^void exit_code(int i){$/;"	f
fd	file.c	/^	int fd; \/\/int car vaut parfois -1$/;"	m	struct:FICHIER	file:
flag	clock.c	/^int flag = T;$/;"	v
grumble	detecter.c	/^void grumble(char* msg){$/;"	f
index	file.c	/^	int index; \/\/juste int Ã  cause des warnings (comparaisons signed\/unsigned)$/;"	m	struct:FICHIER	file:
interval	alarme.c	/^void interval () {$/;"	f
interval	detecter.c	/^void interval(char const *prog, char *const args[], $/;"	f
length	file.c	/^	int length; \/\/int car vaut parfois -1$/;"	m	struct:FICHIER	file:
main	alarme.c	/^int main (void) {$/;"	f
main	clock.c	/^int main (void) {$/;"	f
main	detecter.c	/^int main(int argc, char* const argv[]){$/;"	f
mem	buff.c	/^	char* mem;$/;"	m	struct:s_buff	file:
mode	file.c	/^	unsigned int mode : 1; \/\/un seul bit$/;"	m	struct:FICHIER	file:
my_close	file.c	/^int my_close(FICHIER f){$/;"	f
my_fdtof	file.c	/^FICHIER my_fdtof(int fd, unsigned int mode){	$/;"	f
my_getc	file.c	/^char my_getc(FICHIER f){$/;"	f
my_open	file.c	/^FICHIER my_open(const char* path, const char* mode){$/;"	f
my_putc	file.c	/^char my_putc(int c, FICHIER f){$/;"	f
my_ungetc	file.c	/^char my_ungetc(FICHIER f){$/;"	f
opt_i	alarme.c	/^int opt_i = 4;$/;"	v
output_delta	detecter.c	/^Buffer* output_delta(int fd){$/;"	f
print_time	detecter.c	/^void print_time(char *format){$/;"	f
readAddr	buff.c	/^	unsigned int readAddr;$/;"	m	struct:s_buff	file:
s_buff	buff.c	/^typedef struct s_buff{$/;"	s	file:
safe_atoi	detecter.c	/^int safe_atoi(char const* str){$/;"	f
sigalrm_handler	clock.c	/^void sigalrm_handler (int sig) {$/;"	f
size	buff.c	/^	unsigned int size;$/;"	m	struct:s_buff	file:
usage	detecter.c	/^void usage(char * const command) {$/;"	f
writeAddr	buff.c	/^	unsigned int writeAddr;$/;"	m	struct:s_buff	file:
